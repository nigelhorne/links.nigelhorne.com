#!/usr/bin/env perl

# Copyright (C) 2024 Nigel Horne
#	https://github.com/nigelhorne/links.nigelhorne.com
#	njh@bandsman.co.uk

# Given a URL, generate and print a unique key into links.csv
#	Find an entry in the database using the web interface at ../cgi-bin/links.cgi

BEGIN {
	# Sanitize environment variables
	delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
	$ENV{'PATH'} = '/usr/local/bin:/bin:/usr/bin';	# For insecurity

	if(-d '/home/hornenj/perlmods') {
		# Running at Dreamhost
		unshift @INC, (
			'/home/hornenj/perlmods/lib/perl/5.34',
			'/home/hornenj/perlmods/lib/perl/5.34.0',
			'/home/hornenj/perlmods/share/perl/5.34',
			'/home/hornenj/perlmods/share/perl/5.34.0',
			'/home/hornenj/perlmods/lib/perl5',
			'/home/hornenj/perlmods/lib/x86_64-linux-gnu/perl/5.34.0',
			'/home/hornenj/perlmods/lib/perl5/x86_64-linux-gnu-thread-multi'
		);
	}
}

no lib '.';

use strict;
use warnings;

use File::Spec;
use FindBin qw($Bin);
use IPC::System::Simple;
use String::Random;
use autodie qw(:all);

use lib "$Bin/../lib";
use Database::links;

if(scalar(@ARGV) == 0) {
        die "Usage: $0 URL"
}

my $links = Database::links->new("$Bin/../etc");

if(my $entry = $links->entry(location => $ARGV[0])) {
	print "http://links.nigelhorne.com/l/$entry\n";	# Already in the database
	exit 0;
}

# Keep generating until we have a unique key
while(1) {
	my $entry = lc(String::Random->new()->randpattern('s' x 8));

	$entry =~ s/\//-/g;	# Remove slashes from shortened URLs

	if(!$links->location($entry)) {
		print "http://links.nigelhorne.com/l/$entry\n";
		if(open(my $fout, '>>', File::Spec->catfile("$Bin/../etc", 'links.csv'))) {
			print $fout "$entry,$ARGV[0]\n";
		}
		last;
	}
}

1;
